<% content_for :nav_guides do %> class="marked"<% end %>
<% content_for :breadcrumbs do %><%= link_to "Guides index", :action => :index%> &gt; Debugging<% end %>

<h2>Debugging</h2>

<h3>Quick start</h3>

<p>So how do you get this thing running? Well, unless you already have buildr installed, you need to install it. To do this, use the gem command provided by rubygems. If you don't have rubygems installed on your system, refer to the <a href="http://docs.rubygems.org/read/chapter/3">rubygems installation guide</a> for instructions on how to install it.</p>

<p>Got rubygems installed yet? Good. Now all you need to do is compile and package Grouphugs, then run it. This is very simple:</p>

<pre class="code">buildr clean package</pre>

<p>This command tells buildr to pull any missing libraries from a remote maven repository, compile Grouphugs, and package it neatly into a .jar file for you. The resulting .jar file can now be found in the target/ subdirectory.</p>

<p>It is now possible to run the bot by issuing the following command:</p>

<pre class="code">java -jar target/&lt;jar file name&gt;</pre>

<p>However, we advise you to also take a look at the following optional additions.</p>

<h3>Optional additions</h3>

<h4>1: SQL</h4>

<p>In order to get SQL running, you simply need to <%= link_to "download the database", :controller => :about, :action => :libs %> and put it in your project root.</p>

<p class="note">This will be the database in the state it was at the exact moment you download it. Remember that any changes you make to it will not be applied to the database file on the deployed bot. For more info, read up on <%= link_to "managing sql", :action => :managingsql %>.</p>

<h4>2: Logging output</h4>

<p>The log output is normally redirected to the file 'log-current' in the project root.</p>

<p>You may want to skip this redirection, for example if you're using an IDE with a console, unless you're ok with using 'tail -f' or something similar. Go to the main() method in Grouphug.java, and search for the following:</p>

<pre class="code">System.setOut(stdOut);
System.setErr(stdOut);</pre>

<p>Simply comment out these two lines, and output will come right to the console.</p>

<p>Just remember to uncomment them before pushing back your changes!</p>

<h4>3: Channel name</h4>

<p>It is probably a good idea to test out the functionality for yourself in a seperate channel. The channel variable can be found in Grouphugs.java near the top of the class.</p>

<p>Remember to change the channel name back before pushing back your changes!</p>

<h4>4: Libraries and dependencies</h4>

<p><em>(This is purely informational)</em></p>

<p>Since Grouphugs uses buildr as its build system, and buildr interacts with maven repositories, there's next to no need to worry about libraries &mdash; buildr will pull the necessary libraries from a remote maven repository and install them in your local maven repository (typically in ~/.m2/repository).</p>

<h3>That's it!</h3>

<p>Now you should be able to simply run the bot. It will connect to IRC from your local computer and hopefully be visible there, and behaving exactly the same way the final deployed bot would behave.</p>

<hr>

<p>Back to the <%= link_to "guides index", :action => :index%>.</p>
