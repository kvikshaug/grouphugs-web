<% content_for :nav_guides do %> class="marked"<% end %>
<% content_for :breadcrumbs do %><%= link_to "Guides index", :action => :index%> &gt; Debugging<% end %>

<h2>Debugging</h2>

<h3>Quick start</h3>

<p>So how do you get this thing running? Well, unless you already have buildr installed, you need to install it. To do this, use the gem command provided by rubygems. If you don't have rubygems installed on your system, refer to the <a href="http://docs.rubygems.org/read/chapter/3">rubygems installation guide</a> for instructions on how to install it.</p>

<p>Got rubygems installed yet? Good. Now all you need to do is compile and package Grouphugs, then run it. This is very simple:</p>

<pre class="code">buildr clean package</pre>

<p>This command tells buildr to pull any missing libraries from a remote maven repository, compile Grouphugs, and package it neatly into a .jar file for you. The resulting .jar file can now be found in the target/ subdirectory. Now, to run the .jar file, grouphugs.db (located in the project root directory) needs to be placed in the same directory as the .jar, and when that's all done you can issue the following command:</p>

<pre class="code">java -jar &lt;jar file name&gt;</pre>

<p>Grouphugs should now be running.</p>

<p>After <%= link_to "downloading", :action => :pullingandpushing %> the source and applying your changes, you may be eager to test them out. But as we all know all too well, there is no such thing as bug-free code, so here we will explain how to run the bot on your local machine to find all (or most) of your bugs before you deploy them.</p>

<h3>1: Libraries</h3>

<p>Since Grouphugs uses buildr as its build system, and buildr interacts with maven repositories, there's next to no need to worry about libraries &mdash; buildr will pull the necessary libraries from a remote maven repository and install them in your local maven repository (typically in ~/.m2/repository).</p>

<h3>2: Logging output</h3>

<p>The log output is normally redirected to the file 'log-current' in the project root.</p>

<p class="note">For you windows users: Even though it doesn't have the '.txt' extension, you CAN open it as a normal text file.</p>

<p>You may want to skip this redirection, for example if you're using an IDE with a console, unless you're ok with using 'tail -f' or something similar. Go to the main() method in Grouphug.java, and search for the following:</p>

<pre class="code">System.setOut(stdOut);
System.setErr(stdOut);</pre>

<p>Simply comment out these two lines, and output will come right to the console.</p>

<p>Just remember to uncomment them before pushing back your changes!</p>

<h3>3: Channel name</h3>

<p>It is probably a good idea to test out the functionality for yourself in a seperate channel. The channel variable can be found in Grouphugs.java near the top of the class. Remember to check the console even though the bot doesn't output any errors to the channel, and remember to change the channel name back before pushing back your changes!</p>

<h3>4: Go!</h3>

<p>When all of this is taken care of, you should be able to simply run the bot. It will use the 'grouphugs.db' file, which came from the repository, as its SQL database. It will connect from your local computer and hopefully be visible on IRC, and behaving exactly the same way the final deployed bot would behave.</p>

<hr>

<p>Back to the <%= link_to "guides index", :action => :index%>.</p>
