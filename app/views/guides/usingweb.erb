<% content_for :nav_guides do %> class="marked"<% end %>
<% content_for :breadcrumbs do %><%= link_to "Guides index", :action => :index%> &gt; Using Web<% end %>

<h2>Using the Web utility class</h2>

<p>Many modules need to do some common things on the web, like fetch and parse the source code of some site, make a google search, and so on. This class lets you do some of those things easily.</p>

<h3>Parsing a remote web site</h3>

<p>The <em style="color: #e00;">recommended</em> way to do this is to use the <%= link_to "getJDOMDocument(java.net.URL)", "http://gh.kvikshaug.no/jdoc/no/kvikshaug/gh/util/Web.html#getJDOMDocument(java.net.URL)" %> method which generates a valid JDOM document out of most valid and invalid web pages (using tagsoup), and then parse that using <%= link_to "XPath", "http://www.w3schools.com/XPath/default.asp" %>, which is pretty easy once you know how.</p>

<p class="note">That method uses <%= link_to "prepareEncodedBufferedReader(URL)", "http://gh.kvikshaug.no/jdoc/no/kvikshaug/gh/util/Web.html#prepareEncodedBufferedReader(java.net.URL)" %> which in turn uses <%= link_to "prepareInputStream(URL)", "http://gh.kvikshaug.no/jdoc/no/kvikshaug/gh/util/Web.html#prepareInputStream(java.net.URL)" %>. Those methods are public and you can use them yourself if you feel the need.</p>

<p>Then, just create an XPath instance and use it on the document. For example, to pull out a hyperreferences with "remote" as id:</p>

<pre class="code">try {
  XPath xpath =
    XPath.newInstance("//h:a[@id='remote']");
  xpath.addNamespace("h",
    "http://www.w3.org/1999/xhtml");
  Document doc = Web.getJDOMDocument(
    new URL("http://my.site.com/"));

  // content will be null if there are no such elements
  Element content =
    (Element)xpath.selectSingleNode(postDocument)
} catch(IOException e) {
  e.printStackTrace();
  bot.sendMessage("I caught an IOException.");
} catch(JDOMException e) {
  e.printStackTrace();
  bot.sendMessage("I caught a JDOMException.");
}</pre>

<p>Never forget to add the xhtml namespace to the xpath instance.</p>

<p>Note that this method uses GuessEncoding to guess the encoding of the remote web site; however it may fail. If so, a default encoding (currently utf-8) is used.</p>

<h3>Making a google search</h3>

<p>This is almost too easy. Just call the method, get a list of result URLs, and catch any IOExceptions, like this:</p>

<pre class="code">try {
  ArrayList<URL> urls = Web.googleSearch(
    "where to buy hugs");

  if(urls.size() == 0) {
    // there were no results
  }

  for(URL url : urls) {
    // these are all the results
    // do what you want with them
    bot.sendMessage("Result: " + url.toString());
  }

} catch(IOException e) {
  // couldn't connect and perform the google search
  e.printStackTrace();
}
</pre>

<p>That's it! If you just want the first result, use <span class="inline-code">urls.get(0)</span> (just remember to check if it's empty first).</p>

<p class="note">You should check out the source code, or simply the <a href="http://gh.kvikshaug.no/jdoc/grouphug/util/Web.html">the javadoc</a> for more information of what the methods in the Web utility class do.</p>

<hr>

<p>Back to the <%= link_to "guides index", :action => :index%>.</p>
